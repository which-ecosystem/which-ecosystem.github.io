{"version":3,"sources":["components/Image/BackgroundImage.tsx","components/FileUpload/FileUpload.tsx","utils/uploadFileToS3.ts","containers/PollCreation/useS3Preupload.ts","components/AttachLink/Modal.tsx","components/AttachLink/AttachLink.tsx","containers/PollCreation/ImageInput.tsx","utils/getLocalFileUrl.ts","containers/PollCreation/PollCreation.tsx"],"names":["useStyles","makeStyles","root","position","width","height","image","objectFit","pointerEvents","BackgroundImage","src","alt","classes","className","FileUpload","callback","children","inputRef","useRef","handleClick","current","click","child","React","Children","only","defaultButton","onClick","variant","color","size","startIcon","type","ref","multiple","accept","style","display","onChange","event","files","target","length","isValidElement","cloneElement","compressFile","file","quality","Promise","resolve","reject","Compressor","success","result","error","err","setProgress","config","headers","onUploadProgress","progressEvent","loaded","total","progress","Math","round","Bluebird","all","get","name","then","response","compressedFile","uploadUrl","data","axios","put","uri","url","slice","indexOf","useState","setFile","useCallback","a","File","uploadFileToS3","Modal","setIsOpen","isOpen","setUrl","handleClose","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","id","label","fullWidth","autoComplete","value","DialogActions","Button","startsWith","match","fileId","disabled","AttachLink","handleOpen","justifyContent","flexDirection","alignItems","clearIcon","opacity","fontSize","overlay","backgroundColor","top","left","transitionDuration","invisible","icon","ImageInput","childrenCallback","reader","FileReader","addEventListener","Error","readAsDataURL","localUrl","Upload","Typography","Media","CardActionArea","undefined","Boolean","CircularProgress","Check","CancelOutlined","theme","marginBottom","spacing","images","PollCreation","history","useHistory","enqueueSnackbar","useSnackbar","user","useAuth","updateFeed","useFeed","mutate","useS3Preupload","setLeft","resolveLeft","leftProgress","right","setRight","resolveRight","rightProgress","leftUrl","rightUrl","contents","push","post","Container","maxWidth","disableGutters","Card","UserStrip","info","Divider","LinearProgress"],"mappings":"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","file":"static/js/10.70b1fe32.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Image from './Image';\n\ninterface PropTypes {\n  src?: string;\n  alt?: string;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'absolute',\n    width: '100%',\n    height: '100%'\n  },\n  image: {\n    objectFit: 'cover',\n    pointerEvents: 'none',\n    width: '100%',\n    height: '100%'\n  }\n});\n\nconst BackgroundImage: React.FC<PropTypes> = ({ src, alt }) => {\n  const classes = useStyles();\n\n  return (\n    <picture className={classes.root}>\n      <Image src={src} alt={alt} className={classes.image} />\n    </picture>\n  );\n};\n\nexport default BackgroundImage;\n\n","import React, { useRef } from 'react';\nimport Button from '@material-ui/core/Button';\nimport CloudUpload from '@material-ui/icons/CloudUpload';\n\ninterface PropTypes {\n  callback: (file: File) => void;\n}\n\n\nconst FileUpload: React.FC<PropTypes> = ({ callback, children }) => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = event.target?.files;\n    if (files?.length) callback(files[0]);\n  };\n\n  const handleClick = () => {\n    if (inputRef?.current) inputRef.current.click();\n  };\n\n  const child = children && React.Children.only(children);\n\n  const defaultButton = (\n    <Button\n      onClick={handleClick}\n      variant=\"contained\"\n      color=\"primary\"\n      size=\"large\"\n      startIcon={<CloudUpload />}\n    >\n      Upload\n    </Button>\n  );\n\n  return (\n    <>\n      <input\n        type=\"file\"\n        ref={inputRef}\n        multiple={false}\n        accept=\".jpg, .jpeg, .png, .gif\"\n        style={{ display: 'none' }}\n        onChange={handleChange}\n      />\n      {\n        React.isValidElement(child)\n          ? React.cloneElement(child, { onClick: handleClick })\n          : defaultButton\n      }\n    </>\n  );\n};\n\nexport default FileUpload;\n","import Compressor from 'compressorjs';\nimport axios from 'axios';\nimport Bluebird from 'bluebird';\nimport { get } from '../requests';\n\ninterface ProgressEvent {\n  loaded: number;\n  total: number;\n}\n\ntype SetProgress = (progress: number) => void;\n\n\nconst compressFile = (file: File, quality = 0.6): Promise<File | Blob> => {\n  return new Promise((resolve, reject) => {\n    if (quality === 1) return resolve(file);\n    return new Compressor(file, {\n      success: result => resolve(result),\n      error: err => reject(err),\n      quality\n    });\n  });\n};\n\nexport default (file: File, quality?: number, setProgress?: SetProgress): Promise<string> => {\n  const onUploadProgress = (progressEvent: ProgressEvent): void => {\n    if (setProgress) {\n      const { loaded, total } = progressEvent;\n      // Only allow upload progress reach 95%, and set 100% when request is resolved\n      const progress = Math.round((loaded * 95) / total);\n      setProgress(progress);\n    }\n  };\n\n  const config = {\n    headers: { 'Content-Type': 'image/png' },\n    onUploadProgress\n  };\n\n  // Add querystring to avoid caching request in some browsers, see\n  // https://stackoverflow.com/questions/59339561/safari-skipping-xmlhttprequests\n  return Bluebird.all([get(`/files?key=${file.name}`), compressFile(file, quality)])\n    .then(([response, compressedFile]) => {\n      const uploadUrl = response.data;\n      return axios.put(uploadUrl, compressedFile, config);\n    })\n    .then(response => {\n      if (setProgress) setProgress(100);\n      const uri = response.config.url;\n      return uri ? uri.slice(0, uri.indexOf('?')) : '';\n    });\n};\n\n","import { useState, useCallback } from 'react';\nimport uploadFileToS3 from '../../utils/uploadFileToS3';\n\ninterface Hook {\n  file: File | string | undefined;\n  setFile: (value: File | string | undefined) => void;\n  resolve: () => Promise<string>;\n  progress: number;\n}\n\nexport default (): Hook => {\n  const [file, setFile] = useState<File | string>();\n  const [progress, setProgress] = useState<number>(0);\n\n  const resolve = useCallback(async (quality?: number): Promise<string> => {\n    // Indicate start\n    setProgress(0.01);\n\n    if (file instanceof File) return uploadFileToS3(file, quality, setProgress);\n    return file || '';\n  }, [file]);\n\n  return {\n    file,\n    setFile,\n    resolve,\n    progress\n  };\n};\n","import React, { useState } from 'react';\nimport {\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from '@material-ui/core';\n\ninterface PropTypes {\n  isOpen: boolean;\n  setIsOpen: (value: boolean) => void;\n  callback: (url: string) => void;\n}\n\nconst Modal: React.FC<PropTypes> = ({ setIsOpen, isOpen, callback }) => {\n  const [url, setUrl] = useState<string>('');\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleSubmit = () => {\n    let result = url;\n    if (url.startsWith('https://www.instagram.com/')) {\n      const match = url.match('/p/(.*)/');\n      const id = match && match[1];\n      result = `https://www.instagram.com/p/${id}/media/?size=l`;\n    } else if (url.startsWith('https://drive.google.com/')) {\n      const match = url.match('/d/(.*)/');\n      const fileId = match && match[1];\n      result = `https://drive.google.com/uc?export=view&id=${fileId}`;\n    }\n    callback(result || '');\n    handleClose();\n  };\n\n  const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(event.target.value);\n  };\n\n  return (\n    <div>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle>Upload via link</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Provide a valid URL to your image:\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Image URL\"\n            type=\"text\"\n            fullWidth\n            autoComplete=\"off\"\n            onChange={handleChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\" disabled={!url.length}>\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport LinkIcon from '@material-ui/icons/Link';\nimport Modal from './Modal';\n\ninterface PropTypes {\n  callback: (url: string) => void;\n}\n\nconst AttachLink: React.FC<PropTypes> = ({ callback, children }) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleOpen = (): void => {\n    setIsOpen(true);\n  };\n\n  const defaultButton = (\n    <Button\n      onClick={handleOpen}\n      variant=\"outlined\"\n      color=\"primary\"\n      startIcon={<LinkIcon />}\n    >\n      Attach a link\n    </Button>\n  );\n\n  const child = children && React.Children.only(children);\n\n  return (\n    <>\n      <Modal callback={callback} isOpen={isOpen} setIsOpen={setIsOpen} />\n      {\n        React.isValidElement(child)\n          ? React.cloneElement(child, { onClick: handleOpen })\n          : defaultButton\n      }\n    </>\n  );\n};\n\nexport default AttachLink;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  CardActionArea,\n  Typography,\n  CircularProgress\n} from '@material-ui/core';\nimport { Check, CancelOutlined } from '@material-ui/icons';\n\nimport AttachLink from '../../components/AttachLink/AttachLink';\nimport FileUpload from '../../components/FileUpload/FileUpload';\nimport BackgroundImage from '../../components/Image/BackgroundImage';\nimport getLocalFileUrl from '../../utils/getLocalFileUrl';\n\ninterface PropTypes {\n  callback: (file?: File | string) => void;\n  progress?: number;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '50%'\n  },\n  clearIcon: {\n    opacity: '.5',\n    fontSize: 50\n  },\n  overlay: {\n    backgroundColor: 'rgba(0, 0, 0, 0.45)',\n    color: 'white',\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    transitionDuration: '0.5s'\n  },\n  invisible: {\n    backgroundColor: 'rgba(0, 0, 0, 0)'\n  },\n  icon: {\n    color: 'white'\n  }\n});\n\n\nconst ImageInput: React.FC<PropTypes> = ({ callback, progress }) => {\n  const classes = useStyles();\n  const [url, setUrl] = useState<string>();\n\n  const handleClear = (): void => {\n    setUrl(undefined);\n    callback(undefined);\n  };\n\n  const childrenCallback = (value: File | string) => {\n    if (value instanceof File) {\n      getLocalFileUrl(value).then(localUrl => setUrl(localUrl));\n    } else setUrl(value);\n\n    callback(value);\n  };\n\n  const Upload = (\n    <div className={classes.root}>\n      <FileUpload callback={childrenCallback} />\n      <Typography variant=\"h6\"> or </Typography>\n      <AttachLink callback={childrenCallback} />\n    </div>\n  );\n\n  const Media = (\n    <CardActionArea onClick={handleClear} className={classes.root} disabled={Boolean(progress)}>\n      <BackgroundImage src={url} />\n      <div className={`${classes.overlay} ${progress === 100 && classes.invisible}`}>\n        {\n          progress\n            ? progress < 100\n              ? <CircularProgress variant=\"static\" value={progress} className={classes.icon} />\n              : <Check className={classes.icon} fontSize=\"large\" />\n            : <CancelOutlined className={classes.icon} fontSize=\"large\" />\n        }\n      </div>\n    </CardActionArea>\n  );\n\n  return url ? Media : Upload;\n};\n\nexport default ImageInput;\n","export default (file: File): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n\n    reader.addEventListener('load', () => {\n      if (typeof reader.result === 'string') resolve(reader.result);\n    }, false);\n\n    reader.addEventListener('error', () => {\n      reject(new Error('Error reading the file'));\n    }, false);\n\n    if (file) reader.readAsDataURL(file);\n  });\n};\n","import React from 'react';\nimport Bluebird from 'bluebird';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Button,\n  Card,\n  Divider,\n  Container,\n  LinearProgress\n} from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\n\nimport useS3Preupload from './useS3Preupload';\nimport ImageInput from './ImageInput';\nimport UserStrip from '../../components/UserStrip/UserStrip';\nimport { post } from '../../requests';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useFeed } from '../../hooks/APIClient';\n\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginBottom: theme.spacing(4)\n  },\n  images: {\n    height: theme.spacing(50),\n    display: 'flex'\n  }\n}));\n\n\nconst PollCreation: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n  const { mutate: updateFeed } = useFeed();\n  const {\n    file: left,\n    setFile: setLeft,\n    resolve: resolveLeft,\n    progress: leftProgress\n  } = useS3Preupload();\n  const {\n    file: right,\n    setFile: setRight,\n    resolve: resolveRight,\n    progress: rightProgress\n  } = useS3Preupload();\n\n  const handleClick = async () => {\n    try {\n      const [leftUrl, rightUrl] = await Bluebird.all([resolveLeft(), resolveRight()]);\n\n      const contents = {\n        left: { url: leftUrl },\n        right: { url: rightUrl }\n      };\n\n      history.push('/feed');\n\n      post('/polls/', { contents }).then(() => {\n        updateFeed();\n        enqueueSnackbar('Your poll has been successfully created!', { variant: 'success' });\n      });\n    } catch (error) {\n      enqueueSnackbar('Failed to create a poll. Please, try again.', { variant: 'error' });\n      history.push('/feed');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\" disableGutters>\n      <Card className={classes.root}>\n        {user && <UserStrip user={user} info=\"\" />}\n        <Divider />\n        <div className={classes.images}>\n          <ImageInput callback={setLeft} progress={leftProgress} />\n          <ImageInput callback={setRight} progress={rightProgress} />\n        </div>\n        {\n          leftProgress || rightProgress\n            ? <LinearProgress color=\"primary\" />\n            : (\n              <Button\n                color=\"primary\"\n                disabled={!(left && right)}\n                variant=\"contained\"\n                onClick={handleClick}\n                fullWidth\n              >\n                Submit\n              </Button>\n            )\n        }\n      </Card>\n    </Container>\n  );\n};\n\nexport default PollCreation;\n"],"sourceRoot":""}