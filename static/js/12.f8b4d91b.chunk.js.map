{"version":3,"sources":["containers/Registration/Registration.tsx"],"names":["validationSchema","Yup","username","lowercase","required","email","password","min","useStyles","makeStyles","theme","root","margin","spacing","width","display","flexDirection","alignItems","textAlign","formHeader","fontSize","formTransfer","justifyContent","transferButton","marginLeft","color","cursor","Registration","classes","login","useAuth","history","useHistory","useState","showPassword","setShowPassword","toggleShowPassword","prevState","className","initialValues","onSubmit","post","then","push","values","errors","touched","isSubmitting","autoComplete","id","name","label","value","toLowerCase","error","helperText","as","TextField","type","InputProps","endAdornment","position","size","onClick","variant","disabled","role"],"mappings":"2OAqBMA,EAAmBC,IAAW,CAClCC,SAAUD,MACPE,UAAU,qBACVC,SAAS,0BACZC,MAAOJ,MACJI,MAAM,yBACND,SAAS,0BACZE,SAAUL,MACPM,IAAI,EAAG,mCACPH,SAAS,4BAGRI,EAAYC,aAAW,SAAAC,GAAK,MAAK,CACrCC,KAAM,CACJ,QAAS,CACPC,OAAQF,EAAMG,QAAQ,GACtBC,MAAOJ,EAAMG,QAAQ,KAEvBE,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,UAAW,UAEbC,WAAY,CACVD,UAAW,SACXE,SAAU,IAEZC,aAAc,CACZN,QAAS,OACTO,eAAgB,UAElBC,eAAgB,CACdC,WAAY,GACZC,MAAO,QACPC,OAAQ,eA0FGC,UAtFgB,WAC7B,IAAMC,EAAUpB,IACRqB,EAAUC,cAAVD,MACFE,EAAUC,cAHmB,EAIKC,oBAAkB,GAJvB,mBAI5BC,EAJ4B,KAIdC,EAJc,KAgB7BC,EAAqB,WACzBD,GAAgB,SAAAE,GAAS,OAAKA,MAGhC,OACE,oCACE,yBAAKC,UAAWV,EAAQT,YAAxB,WACA,kBAAC,IAAD,CACEoB,cAAe,CAAErC,SAAU,GAAIG,MAAO,GAAIC,SAAU,IACpDN,iBAAkBA,EAClBwC,SAhBe,SAAC,GAA2C,IAAzCtC,EAAwC,EAAxCA,SAAUG,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SACvCmC,YAAK,SAAU,CAAEvC,WAAUG,QAAOC,aAC/BoC,MAAK,kBAAMb,EAAM3B,EAAUI,MAC3BoC,MAAK,kBAAMX,EAAQY,KAAR,mBAAyBzC,UAelC,gBAAG0C,EAAH,EAAGA,OAAQC,EAAX,EAAWA,OAAQC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,aAA5B,OACC,kBAAC,IAAD,CAAMT,UAAWV,EAAQjB,KAAMqC,aAAa,OAC1C,kBAAC,IAAD,CACEC,GAAG,WACHC,KAAK,WACLC,MAAM,WACNC,MAAOR,EAAO1C,SAASmD,cACvBC,MAAOR,EAAQ5C,YAAc2C,EAAO3C,SACpCqD,WAAYT,EAAQ5C,UAAY2C,EAAO3C,SACvCE,UAAQ,EACRoD,GAAIC,MAEN,kBAAC,IAAD,CACEP,KAAK,QACLC,MAAM,QACNC,MAAOR,EAAOvC,MACdiD,MAAOR,EAAQzC,SAAWwC,EAAOxC,MACjCkD,WAAYT,EAAQzC,OAASwC,EAAOxC,MACpCD,UAAQ,EACRoD,GAAIC,MAEN,kBAAC,IAAD,CACEP,KAAK,WACLC,MAAM,WACNC,MAAOR,EAAOtC,SACdgD,MAAOR,EAAQxC,YAAcuC,EAAOvC,SACpCiD,WAAYT,EAAQxC,UAAYuC,EAAOvC,SACvCF,UAAQ,EACRsD,KAAMxB,EAAe,OAAS,WAC9BsB,GAAIC,IACJE,WAAY,CACVC,aACE,kBAAC,IAAD,CAAgBC,SAAS,OACvB,kBAAC,IAAD,CAAYC,KAAK,QAAQC,QAAS3B,GAC/BF,EAAe,kBAAC,IAAD,MAAiB,kBAAC,IAAD,WAM3C,kBAAC,IAAD,CAAQ8B,QAAQ,YAAYN,KAAK,SAASO,SAAUlB,GAApD,cAIN,yBAAKT,UAAWV,EAAQP,cACtB,yDACA,0BACE0C,QArEY,WAClBhC,EAAQY,KAAK,WAqEPL,UAAWV,EAAQL,eACnB2C,KAAK,gBAHP","file":"static/js/12.f8b4d91b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { Formik, Form, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  TextField,\n  Button,\n  InputAdornment,\n  IconButton\n} from '@material-ui/core';\nimport { Visibility, VisibilityOff } from '@material-ui/icons';\nimport { post } from '../../requests';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface Fields {\n  username: string;\n  email: string;\n  password: string;\n}\n\nconst validationSchema = Yup.object({\n  username: Yup.string()\n    .lowercase('Must be lowercase')\n    .required('This field is required'),\n  email: Yup.string()\n    .email('Invalid email address')\n    .required('This field is required'),\n  password: Yup.string()\n    .min(6, 'Should be at least 6 characters')\n    .required('This field is required')\n});\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& > *': {\n      margin: theme.spacing(1),\n      width: theme.spacing(35)\n    },\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'center',\n    textAlign: 'center'\n  },\n  formHeader: {\n    textAlign: 'center',\n    fontSize: 25\n  },\n  formTransfer: {\n    display: 'flex',\n    justifyContent: 'center'\n  },\n  transferButton: {\n    marginLeft: 10,\n    color: 'green',\n    cursor: 'pointer'\n  }\n}));\n\nconst Registration: React.FC = () => {\n  const classes = useStyles();\n  const { login } = useAuth();\n  const history = useHistory();\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n\n  const handleLogin = () => {\n    history.push('/login');\n  };\n\n  const handleSubmit = ({ username, email, password }: Fields) => {\n    post('/users', { username, email, password })\n      .then(() => login(username, password))\n      .then(() => history.push(`/profile/${username}`));\n  };\n\n  const toggleShowPassword = () => {\n    setShowPassword(prevState => !prevState);\n  };\n\n  return (\n    <>\n      <div className={classes.formHeader}>Sign Up</div>\n      <Formik\n        initialValues={{ username: '', email: '', password: '' }}\n        validationSchema={validationSchema}\n        onSubmit={handleSubmit}\n      >\n        {({ values, errors, touched, isSubmitting }) => (\n          <Form className={classes.root} autoComplete=\"off\">\n            <Field\n              id=\"username\"\n              name=\"username\"\n              label=\"Username\"\n              value={values.username.toLowerCase()}\n              error={touched.username && !!errors.username}\n              helperText={touched.username && errors.username}\n              required\n              as={TextField}\n            />\n            <Field\n              name=\"email\"\n              label=\"Email\"\n              value={values.email}\n              error={touched.email && !!errors.email}\n              helperText={touched.email && errors.email}\n              required\n              as={TextField}\n            />\n            <Field\n              name=\"password\"\n              label=\"Password\"\n              value={values.password}\n              error={touched.password && !!errors.password}\n              helperText={touched.password && errors.password}\n              required\n              type={showPassword ? 'text' : 'password'}\n              as={TextField}\n              InputProps={{\n                endAdornment: (\n                  <InputAdornment position=\"end\">\n                    <IconButton size=\"small\" onClick={toggleShowPassword}>\n                      {showPassword ? <Visibility /> : <VisibilityOff />}\n                    </IconButton>\n                  </InputAdornment>\n                )\n              }}\n            />\n            <Button variant=\"contained\" type=\"submit\" disabled={isSubmitting}>submit</Button>\n          </Form>\n        )}\n      </Formik>\n      <div className={classes.formTransfer}>\n        <div>Already have an account?</div>\n        <span\n          onClick={handleLogin}\n          className={classes.transferButton}\n          role=\"presentation\"\n        >\n          Log in\n        </span>\n      </div>\n    </>\n  );\n};\n\nexport default Registration;\n"],"sourceRoot":""}