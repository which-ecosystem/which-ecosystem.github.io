{"version":3,"sources":["components/AttachLink/Modal.tsx","components/AttachLink/AttachLink.tsx","components/FileUpload/FileUpload.tsx","containers/PollCreation/PollCreationImage.tsx","containers/PollCreation/PollCreation.tsx"],"names":["Modal","setIsOpen","isOpen","callback","useState","url","setUrl","handleClose","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","id","label","type","fullWidth","autoComplete","onChange","event","target","value","DialogActions","Button","onClick","color","result","startsWith","match","fileId","disabled","length","AttachLink","children","handleOpen","defaultButton","variant","startIcon","child","React","Children","toArray","isValidElement","cloneElement","FileUpload","useFilePicker","files","HiddenFileInput","useEffect","file","utils","loadFile","then","size","accept","multiple","useStyles","makeStyles","root","display","justifyContent","flexDirection","alignItems","width","clearIcon","opacity","fontSize","media","height","PollCreationImage","classes","childrenCallback","fileUrl","Upload","className","Typography","Media","CardActionArea","undefined","CardMedia","image","theme","marginBottom","spacing","images","PollCreation","history","useHistory","left","setLeft","right","setRight","enqueueSnackbar","useSnackbar","user","useAuth","updateFeed","useFeed","mutate","readyToSubmit","uploadFile","headers","get","response","data","uploadUrl","axios","put","config","slice","indexOf","resolveFile","a","File","handleClick","Promise","all","leftUrl","rightUrl","contents","post","push","Container","maxWidth","disableGutters","Card","UserStrip","info","Divider"],"mappings":"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","file":"static/js/10.7c1ccaf6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from '@material-ui/core';\n\ninterface PropTypes {\n  isOpen: boolean;\n  setIsOpen: (value: boolean) => void;\n  callback: (url: string) => void;\n}\n\nconst Modal: React.FC<PropTypes> = ({ setIsOpen, isOpen, callback }) => {\n  const [url, setUrl] = useState<string>('');\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleSubmit = () => {\n    let result = url;\n    if (url.startsWith('https://www.instagram.com/')) {\n      const match = url.match('/p/(.*)/');\n      const id = match && match[1];\n      result = `https://www.instagram.com/p/${id}/media/?size=l`;\n    } else if (url.startsWith('https://drive.google.com/')) {\n      const match = url.match('/d/(.*)/');\n      const fileId = match && match[1];\n      result = `https://drive.google.com/uc?export=view&id=${fileId}`;\n    }\n    callback(result || '');\n    handleClose();\n  };\n\n  const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(event.target.value);\n  };\n\n  return (\n    <div>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle>Upload via link</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Provide a valid URL to your image:\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Image URL\"\n            type=\"text\"\n            fullWidth\n            autoComplete=\"off\"\n            onChange={handleChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\" disabled={!url.length}>\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport LinkIcon from '@material-ui/icons/Link';\nimport Modal from './Modal';\n\ninterface PropTypes {\n  callback: (url: string) => void;\n}\n\nconst AttachLink: React.FC<PropTypes> = ({ callback, children }) => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n\n  const handleOpen = (): void => {\n    setIsOpen(true);\n  };\n\n  const defaultButton = (\n    <Button\n      onClick={handleOpen}\n      variant=\"outlined\"\n      color=\"primary\"\n      startIcon={<LinkIcon />}\n    >\n      Attach a link\n    </Button>\n  );\n\n  const child = children && React.Children.toArray(children)[0];\n\n  return (\n    <>\n      <Modal callback={callback} isOpen={isOpen} setIsOpen={setIsOpen} />\n      {\n        React.isValidElement(child)\n          ? React.cloneElement(child, { onClick: handleOpen })\n          : defaultButton\n      }\n    </>\n  );\n};\n\nexport default AttachLink;\n","import React, { useEffect } from 'react';\nimport { useFilePicker, utils } from 'react-sage';\nimport Button from '@material-ui/core/Button';\nimport CloudUpload from '@material-ui/icons/CloudUpload';\n\ninterface PropTypes {\n  callback: (fileUrl: string, file: File) => void;\n}\n\n\nconst FileUpload: React.FC<PropTypes> = ({ callback, children }) => {\n  const { files, onClick, HiddenFileInput } = useFilePicker();\n\n  useEffect(() => {\n    if (files?.length) {\n      const file = files[0];\n      utils.loadFile(file).then(url => callback(url, file));\n    }\n  }, [files, callback]);\n\n  const child = children && React.Children.toArray(children)[0];\n\n  const defaultButton = (\n    <Button\n      onClick={onClick}\n      variant=\"contained\"\n      color=\"primary\"\n      size=\"large\"\n      startIcon={<CloudUpload />}\n    >\n      Upload\n    </Button>\n  );\n\n  return (\n    <>\n      <HiddenFileInput accept=\".jpg, .jpeg, .png, .gif\" multiple={false} />\n      {\n        React.isValidElement(child)\n          ? React.cloneElement(child, { onClick })\n          : defaultButton\n      }\n    </>\n  );\n};\n\nexport default FileUpload;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  CardActionArea,\n  CardMedia,\n  Typography\n} from '@material-ui/core';\nimport ClearIcon from '@material-ui/icons/CancelOutlined';\n\nimport AttachLink from '../../components/AttachLink/AttachLink';\nimport FileUpload from '../../components/FileUpload/FileUpload';\n\ninterface PropTypes {\n  callback: (file?: File | string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center',\n    width: '50%'\n  },\n  clearIcon: {\n    opacity: '.5',\n    fontSize: 50\n  },\n  media: {\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  }\n});\n\n\nconst PollCreationImage: React.FC<PropTypes> = ({ callback }) => {\n  const classes = useStyles();\n  const [url, setUrl] = useState<string>();\n\n  const handleClear = (): void => {\n    setUrl(undefined);\n    callback(undefined);\n  };\n\n  const childrenCallback = (fileUrl: string, file?: File) => {\n    setUrl(fileUrl);\n    callback(file || fileUrl);\n  };\n\n  const Upload = (\n    <div className={classes.root}>\n      <FileUpload callback={childrenCallback} />\n      <Typography variant=\"h6\"> or </Typography>\n      <AttachLink callback={childrenCallback} />\n    </div>\n  );\n\n  const Media = (\n    <CardActionArea onClick={handleClear} className={classes.root}>\n      <CardMedia image={url} className={classes.media}>\n        <ClearIcon className={classes.clearIcon} />\n      </CardMedia>\n    </CardActionArea>\n  );\n\n  return url ? Media : Upload;\n};\n\nexport default PollCreationImage;\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Button,\n  Card,\n  Divider,\n  Container\n} from '@material-ui/core';\nimport { useSnackbar } from 'notistack';\nimport axios from 'axios';\n\nimport PollCreationImage from './PollCreationImage';\nimport UserStrip from '../../components/UserStrip/UserStrip';\nimport { get, post } from '../../requests';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useFeed } from '../../hooks/APIClient';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginBottom: theme.spacing(4)\n  },\n  images: {\n    height: theme.spacing(50),\n    display: 'flex'\n  }\n}));\n\nconst PollCreation: React.FC = () => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [left, setLeft] = useState<File | string>();\n  const [right, setRight] = useState<File | string>();\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n  const { mutate: updateFeed } = useFeed();\n\n  const readyToSubmit = left && right;\n\n  const uploadFile = (file: File): Promise<string> => {\n    const headers = { 'Content-Type': 'image/png' };\n    return get('/files')\n      .then(response => response.data)\n      .then(uploadUrl => axios.put(uploadUrl, file, { headers }))\n      .then(response => {\n        const { config: { url } } = response;\n        return url?.slice(0, url?.indexOf('?')) || '';\n      });\n  };\n\n  const resolveFile = async (file?: File | string): Promise<string> => {\n    if (file instanceof File) return uploadFile(file);\n    return file || '';\n  };\n\n  const handleClick = async () => {\n    if (readyToSubmit) {\n      const [leftUrl, rightUrl] = await Promise.all([resolveFile(left), resolveFile(right)]);\n\n      const contents = {\n        left: { url: leftUrl },\n        right: { url: rightUrl }\n      };\n\n      post('/polls/', { contents }).then(() => {\n        updateFeed();\n        enqueueSnackbar('Your poll has been successfully created!', {\n          variant: 'success'\n        });\n      });\n\n      history.push('/feed');\n    }\n  };\n\n  return (\n    <Container maxWidth=\"sm\" disableGutters>\n      <Card className={classes.root}>\n        {user && <UserStrip user={user} info=\"\" />}\n        <Divider />\n        <div className={classes.images}>\n          <PollCreationImage callback={setLeft} />\n          <PollCreationImage callback={setRight} />\n        </div>\n        <Button\n          color=\"primary\"\n          disabled={!readyToSubmit}\n          variant=\"contained\"\n          onClick={handleClick}\n          fullWidth\n        >\n          Submit\n        </Button>\n      </Card>\n    </Container>\n  );\n};\n\nexport default PollCreation;\n"],"sourceRoot":""}