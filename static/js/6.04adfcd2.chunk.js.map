{"version":3,"sources":["components/UploadImage/UploadImage.tsx","components/PollCard/PercentageBar.tsx","components/PollCard/PollCard.tsx","components/PollsList/PollsList.tsx","../node_modules/@material-ui/icons/CloudUpload.js","../node_modules/@material-ui/icons/CancelOutlined.js","containers/Feed/PollSubmissionImage.tsx","containers/Feed/PollSubmission.tsx","containers/Feed/Feed.tsx"],"names":["UploadImage","setIsOpen","isOpen","callback","useState","url","setUrl","handleClose","open","onClose","autoFocus","margin","id","label","type","fullWidth","autoComplete","onChange","event","target","value","onClick","color","result","startsWith","match","fileId","disabled","length","useStyles","makeStyles","root","position","top","fontSize","textShadow","display","alignItems","left","right","PercentageBar","which","like","classes","className","DATE_FORMAT","month","day","year","hour","minute","theme","images","height","spacing","imagesBlock","rateLine","width","backgroundColor","palette","primary","light","transitionDuration","highlight","main","fillRateLine","PollCard","leftPercentage","rightPercentage","poll","setPoll","author","contents","vote","enqueueSnackbar","useSnackbar","isAuthenticated","useAuth","date","Date","createdAt","toLocaleString","handleVote","variant","newVote","pollId","_id","newPoll","votes","authorId","post","Math","round","dominant","Card","UserStrip","user","info","CardActionArea","onDoubleClick","CardMedia","image","style","PollsList","polls","mutate","RenderItem","index","key","newPolls","isScrolling","registerChild","onChildScroll","scrollTop","disableHeight","ref","autoHeight","onScroll","rowCount","rowHeight","rowRenderer","containerStyle","pointerEvents","overscanRowCount","_interopRequireDefault","require","Object","defineProperty","exports","default","_react","_default","createElement","d","justifyContent","flexDirection","clearIcon","opacity","media","text","textAlign","PollSubmissionImage","isModalOpen","setIsModalOpen","isMediaHover","setIsMediaHover","Upload","Typography","Media","onMouseEnter","onMouseLeave","marginBottom","emptyContents","PollSubmission","addPoll","expanded","setExpanded","setContents","readyToSubmit","ClickAwayListener","onClickAway","Collapse","in","timeout","unmountOnExit","Divider","Button","then","response","data","Feed","useFeed","Container","maxWidth","disableGutters"],"mappings":"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","file":"static/js/6.04adfcd2.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport {\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from '@material-ui/core';\n\ninterface PropTypes {\n  isOpen: boolean;\n  setIsOpen: (value: boolean) => void;\n  callback: (url: string) => void;\n}\n\nconst UploadImage: React.FC<PropTypes> = ({ setIsOpen, isOpen, callback }) => {\n  const [url, setUrl] = useState<string>('');\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleSubmit = () => {\n    let result = url;\n    if (url.startsWith('https://www.instagram.com/')) {\n      const match = url.match('/p/(.*)/');\n      const id = match && match[1];\n      result = `https://www.instagram.com/p/${id}/media/?size=l`;\n    } else if (url.startsWith('https://drive.google.com/')) {\n      const match = url.match('/d/(.*)/');\n      const fileId = match && match[1];\n      result = `https://drive.google.com/uc?export=view&id=${fileId}`;\n    }\n    callback(result || '');\n    handleClose();\n  };\n\n  const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(event.target.value);\n  };\n\n  return (\n    <div>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle>Upload an Image</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Unfortunetly we do not support uploading images yet. Please provide a valid URL to your image:\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Image URL\"\n            type=\"text\"\n            fullWidth\n            autoComplete=\"off\"\n            onChange={handleChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\" disabled={!url.length}>\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default UploadImage;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LikeIcon from '@material-ui/icons/Favorite';\n\ninterface PropTypes {\n  value: number;\n  which: 'left' | 'right';\n  like: boolean;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'absolute',\n    color: 'white',\n    top: '86%',\n    fontSize: 20,\n    textShadow: '0 0 3px black',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  left: {\n    left: 30\n  },\n  right: {\n    right: 30\n  }\n});\n\nconst PercentageBar: React.FC<PropTypes> = ({ value, which, like }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={`${classes.root} ${classes[which]}`}>\n      {like && <LikeIcon />}\n      {`${value}%`}\n    </div>\n  );\n};\n\n\nexport default PercentageBar;\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardActionArea,\n  CardMedia\n} from '@material-ui/core/';\nimport { Which, Poll } from 'which-types';\nimport { useSnackbar } from 'notistack';\n\nimport PercentageBar from './PercentageBar';\nimport UserStrip from '../UserStrip/UserStrip';\nimport { post } from '../../requests';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface PropTypes {\n  poll: Poll;\n  setPoll: (poll: Poll) => void;\n}\n\nconst DATE_FORMAT = {\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit'\n};\n\nconst useStyles = makeStyles(theme => ({\n  images: {\n    height: theme.spacing(50)\n  },\n  imagesBlock: {\n    display: 'flex'\n  },\n  rateLine: {\n    position: 'relative',\n    width: '100%',\n    height: theme.spacing(2),\n    backgroundColor: theme.palette.primary.light,\n    transitionDuration: '0.5s'\n  },\n  highlight: {\n    backgroundColor: `${theme.palette.primary.main} !important`\n  },\n  fillRateLine: {\n    height: theme.spacing(2),\n    backgroundColor: theme.palette.primary.light,\n    transitionDuration: '0.5s'\n  }\n}));\n\nconst PollCard: React.FC<PropTypes> = ({ poll, setPoll }) => {\n  const classes = useStyles();\n  const { author, contents: { left, right }, vote } = poll;\n  const { enqueueSnackbar } = useSnackbar();\n  const { isAuthenticated } = useAuth();\n  const date: string = new Date(poll.createdAt).toLocaleString('default', DATE_FORMAT);\n\n  const handleVote = (which: Which) => {\n    if (!isAuthenticated) {\n      enqueueSnackbar('Unauthorized users can not vote in polls', {\n        variant: 'error'\n      });\n    } else if (vote) {\n      enqueueSnackbar('You have already voted in this poll', {\n        variant: 'error'\n      });\n    } else {\n      const newVote = ({ which, pollId: poll._id });\n      const newPoll = { ...poll };\n      newPoll.contents[which].votes += 1;\n      newPoll.vote = {\n        _id: '',\n        authorId: '',\n        createdAt: new Date(),\n        ...newVote\n      };\n      setPoll(newPoll);\n\n      post('votes/', newVote);\n    }\n  };\n\n  const handleLeft = () => handleVote('left');\n  const handleRight = () => handleVote('right');\n\n  let leftPercentage;\n  let rightPercentage;\n\n  if (left.votes || right.votes) {\n    leftPercentage = Math.round(100 * (left.votes / (left.votes + right.votes)));\n    rightPercentage = 100 - leftPercentage;\n  } else {\n    leftPercentage = 0;\n    rightPercentage = 0;\n  }\n\n  const dominant: Which = left.votes >= right.votes ? 'left' : 'right';\n\n  return (\n    <Card>\n      <UserStrip user={author} info={date} />\n      <div className={classes.imagesBlock}>\n        <CardActionArea onDoubleClick={handleLeft}>\n          <CardMedia\n            className={classes.images}\n            image={left.url}\n          />\n          <PercentageBar value={leftPercentage} which=\"left\" like={vote?.which === 'left'} />\n        </CardActionArea>\n        <CardActionArea onDoubleClick={handleRight}>\n          <CardMedia\n            className={classes.images}\n            image={right.url}\n          />\n          <PercentageBar value={rightPercentage} which=\"right\" like={vote?.which === 'right'} />\n        </CardActionArea>\n      </div>\n      <div className={`${classes.rateLine} ${dominant === 'right' ? classes.highlight : ''}`}>\n        <div\n          className={`${classes.fillRateLine} ${dominant === 'left' ? classes.highlight : ''}`}\n          style={{ width: `${leftPercentage}%` }}\n        />\n      </div>\n    </Card>\n  );\n};\n\nexport default PollCard;\n","import React from 'react';\nimport { Poll } from 'which-types';\nimport { WindowScroller, AutoSizer, List } from 'react-virtualized';\nimport PollCard from '../PollCard/PollCard';\n\n\ninterface PropTypes {\n  polls: Poll[];\n  mutate: (polls: Poll[], refetch: boolean) => void;\n}\n\ninterface RenderPropTypes {\n  index: number;\n  key: string;\n  style: React.CSSProperties;\n}\n\n\nconst PollsList: React.FC<PropTypes> = ({ polls, mutate }) => {\n  const RenderItem: React.FC<RenderPropTypes> = ({ index, style, key }) => {\n    const poll = polls[index];\n\n    const setPoll = (newPoll: Poll) => {\n      const newPolls = [...polls];\n      newPolls[index] = newPoll;\n\n      // Force-update list-size so everything re-renders\n      mutate([], false);\n      mutate(newPolls, false);\n    };\n\n    return (\n      // To re-render on list resize, add this info to key\n      <div key={`${key}-${poll._id}-${polls.length}`} style={style}>\n        <PollCard poll={poll} setPoll={setPoll} />\n      </div>\n    );\n  };\n\n  return (\n    <WindowScroller>\n      {({\n        height,\n        isScrolling,\n        registerChild,\n        onChildScroll,\n        scrollTop\n      }) => (\n        <AutoSizer disableHeight>\n          {({ width }) => (\n            <div ref={registerChild}>\n              <List\n                autoHeight\n                height={height}\n                isScrolling={isScrolling}\n                onScroll={onChildScroll}\n                rowCount={polls.length}\n                rowHeight={550}\n                rowRenderer={RenderItem}\n                scrollTop={scrollTop}\n                width={width}\n                containerStyle={{ pointerEvents: 'auto' }}\n                overscanRowCount={1}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      )}\n    </WindowScroller>\n  );\n};\n\nexport default PollsList;\n\n","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM14 13v4h-4v-4H7l5-5 5 5h-3z\"\n}), 'CloudUpload');\n\nexports.default = _default;","\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createSvgIcon = _interopRequireDefault(require(\"./utils/createSvgIcon\"));\n\nvar _default = (0, _createSvgIcon.default)(_react.default.createElement(\"path\", {\n  d: \"M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.59-13L12 10.59 8.41 7 7 8.41 10.59 12 7 15.59 8.41 17 12 13.41 15.59 17 17 15.59 13.41 12 17 8.41z\"\n}), 'CancelOutlined');\n\nexports.default = _default;","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CloudUploadIcon from '@material-ui/icons/CloudUpload';\nimport { CardActionArea, CardMedia, Typography } from '@material-ui/core';\nimport CancelOutlinedIcon from '@material-ui/icons/CancelOutlined';\n\nimport UploadImage from '../../components/UploadImage/UploadImage';\n\ninterface PropTypes {\n  url: string;\n  setUrl: (url: string) => void;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    display: 'flex',\n    justifyContent: 'center',\n    flexDirection: 'column',\n    alignItems: 'center'\n  },\n  clearIcon: {\n    opacity: '.5',\n    fontSize: 50\n  },\n  media: {\n    height: '100%',\n    width: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center'\n  },\n  text: {\n    textAlign: 'center'\n  }\n});\n\n\nconst PollSubmissionImage: React.FC<PropTypes> = ({ url, setUrl }) => {\n  const classes = useStyles();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isMediaHover, setIsMediaHover] = useState(false);\n\n  const handleClick = (): void => {\n    if (!isModalOpen) {\n      if (url) setUrl('');\n      else setIsModalOpen(!isModalOpen);\n    }\n  };\n\n  const handleMouseEnter = (): void => {\n    setIsMediaHover(true);\n  };\n\n  const handleMouseLeave = (): void => {\n    setIsMediaHover(false);\n  };\n\n\n  const Upload = (\n    <>\n      <CloudUploadIcon fontSize=\"large\" color=\"primary\" />\n      <Typography variant=\"h5\" className={classes.text}> Upload an image </Typography>\n    </>\n  );\n\n  const Media = (\n    <CardMedia\n      image={url}\n      className={classes.media}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n    >\n      {isMediaHover && <CancelOutlinedIcon className={classes.clearIcon} />}\n    </CardMedia>\n  );\n\n  return (\n    <>\n      <CardActionArea onClick={handleClick} className={classes.root}>\n        {url ? Media : Upload}\n      </CardActionArea>\n      <UploadImage isOpen={isModalOpen} setIsOpen={setIsModalOpen} callback={setUrl} />\n    </>\n  );\n};\n\nexport default PollSubmissionImage;\n","import React, { useState } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Collapse from '@material-ui/core/Collapse';\nimport {\n  Button,\n  Card,\n  ClickAwayListener,\n  Divider\n} from '@material-ui/core';\nimport { Poll, Which } from 'which-types';\nimport { useSnackbar } from 'notistack';\nimport PollSubmissionImage from './PollSubmissionImage';\nimport UserStrip from '../../components/UserStrip/UserStrip';\nimport { post } from '../../requests';\nimport { Contents } from './types';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface PropTypes{\n  addPoll: (poll: Poll) => void;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    marginBottom: theme.spacing(4)\n  },\n  images: {\n    height: theme.spacing(50),\n    display: 'flex'\n  }\n}));\n\nconst emptyContents: Contents = {\n  left: { url: '' },\n  right: { url: '' }\n};\n\nconst PollSubmission: React.FC<PropTypes> = ({ addPoll }) => {\n  const classes = useStyles();\n  const [expanded, setExpanded] = useState(false);\n  const [contents, setContents] = useState<Contents>(emptyContents);\n  const { enqueueSnackbar } = useSnackbar();\n  const { user } = useAuth();\n\n  const readyToSubmit = contents.left.url && contents.right.url;\n\n  const setUrl = (which: Which) => (url: string): void => {\n    setContents({ ...contents, [which]: { url } });\n  };\n\n  const handleClickAway = () => {\n    setExpanded(false);\n  };\n\n  const handleClick = () => {\n    if (expanded && readyToSubmit) {\n      post('/polls/', { contents }).then(response => {\n        addPoll(response.data);\n        enqueueSnackbar('Your poll has been successfully created!', {\n          variant: 'success'\n        });\n      });\n      setContents({ ...emptyContents });\n    }\n    setExpanded(!expanded);\n  };\n\n  return (\n    <ClickAwayListener onClickAway={handleClickAway}>\n      <Card className={classes.root}>\n        <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n          {user && <UserStrip user={user} info=\"\" />}\n          <Divider />\n          <div className={classes.images}>\n            <PollSubmissionImage url={contents.left.url} setUrl={setUrl('left')} />\n            <PollSubmissionImage url={contents.right.url} setUrl={setUrl('right')} />\n          </div>\n        </Collapse>\n        <Button\n          color=\"primary\"\n          disabled={expanded && !readyToSubmit}\n          variant={expanded ? 'contained' : 'outlined'}\n          onClick={handleClick}\n          fullWidth\n        >\n          {expanded ? 'Submit' : 'Create a Poll'}\n        </Button>\n      </Card>\n    </ClickAwayListener>\n  );\n};\n\nexport default PollSubmission;\n","import React from 'react';\nimport { Poll } from 'which-types';\nimport { Container } from '@material-ui/core/';\n\nimport PollsList from '../../components/PollsList/PollsList';\nimport PollSubmission from './PollSubmission';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useFeed } from '../../hooks/APIClient';\n\nconst Feed: React.FC = () => {\n  const { data: polls, mutate } = useFeed();\n  const { isAuthenticated } = useAuth();\n\n  const addPoll = (poll: Poll): void => {\n    mutate([poll, ...polls], true);\n  };\n\n  return (\n    <Container maxWidth=\"sm\" disableGutters>\n      {isAuthenticated && <PollSubmission addPoll={addPoll} />}\n      <PollsList polls={polls} mutate={mutate} />\n    </Container>\n  );\n};\n\nexport default Feed;\n\n"],"sourceRoot":""}