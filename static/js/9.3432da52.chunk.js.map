{"version":3,"sources":["components/PollCard/PercentageBar.tsx","components/PollCard/PollCard.tsx","components/PollsList/PollsList.tsx","containers/Profile/Highlight.tsx","components/UploadImage/UploadImage.tsx","containers/Profile/ProfileInfo.tsx","containers/Profile/Profile.tsx"],"names":["useStyles","makeStyles","root","position","color","top","fontSize","textShadow","display","alignItems","left","right","PercentageBar","value","which","like","classes","className","DATE_FORMAT","month","day","year","hour","minute","theme","images","height","spacing","imagesBlock","rateLine","width","backgroundColor","palette","primary","light","transitionDuration","highlight","main","fillRateLine","PollCard","leftPercentage","rightPercentage","poll","setPoll","author","contents","vote","enqueueSnackbar","useSnackbar","isAuthenticated","useAuth","date","Date","createdAt","toLocaleString","handleVote","variant","newVote","pollId","_id","newPoll","votes","authorId","post","Math","round","dominant","Card","UserStrip","user","info","CardActionArea","onDoubleClick","CardMedia","image","url","style","PollsList","polls","mutate","RenderItem","index","key","length","newPolls","isScrolling","registerChild","onChildScroll","scrollTop","disableHeight","ref","autoHeight","onScroll","rowCount","rowHeight","rowRenderer","containerStyle","pointerEvents","overscanRowCount","menuButton","textAlign","menuNumber","fontWeight","menuText","Highlight","text","UploadImage","setIsOpen","isOpen","callback","useState","setUrl","handleClose","Dialog","open","onClose","DialogTitle","DialogContent","DialogContentText","TextField","autoFocus","margin","id","label","type","fullWidth","autoComplete","onChange","event","target","DialogActions","Button","onClick","result","startsWith","match","fileId","disabled","avatar","name","justifyContent","verified","marginLeft","profileMenu","borderBottom","badge","borderRadius","cursor","background","avatarContainer","skeleton","ProfileInfo","savedPolls","totalVotes","setUserInfo","userInfo","input","setInput","dateSince","toLocaleDateString","Badge","overlap","anchorOrigin","vertical","horizontal","badgeContent","Avatar","patch","avatarUrl","then","res","data","Skeleton","animation","Typography","username","Profile","history","useHistory","useParams","useUser","useProfile","mutatePolls","isValidating","useEffect","push","useMemo","reduce","total","current","Container","maxWidth","disableGutters","Loading"],"mappings":"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","file":"static/js/9.3432da52.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LikeIcon from '@material-ui/icons/Favorite';\n\ninterface PropTypes {\n  value: number;\n  which: 'left' | 'right';\n  like: boolean;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'absolute',\n    color: 'white',\n    top: '86%',\n    fontSize: 20,\n    textShadow: '0 0 3px black',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  left: {\n    left: 30\n  },\n  right: {\n    right: 30\n  }\n});\n\nconst PercentageBar: React.FC<PropTypes> = ({ value, which, like }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={`${classes.root} ${classes[which]}`}>\n      {like && <LikeIcon />}\n      {`${value}%`}\n    </div>\n  );\n};\n\n\nexport default PercentageBar;\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport {\n  Card,\n  CardActionArea,\n  CardMedia\n} from '@material-ui/core/';\nimport { Which, Poll } from 'which-types';\nimport { useSnackbar } from 'notistack';\n\nimport PercentageBar from './PercentageBar';\nimport UserStrip from '../UserStrip/UserStrip';\nimport { post } from '../../requests';\nimport { useAuth } from '../../hooks/useAuth';\n\ninterface PropTypes {\n  poll: Poll;\n  setPoll: (poll: Poll) => void;\n}\n\nconst DATE_FORMAT = {\n  month: 'long',\n  day: 'numeric',\n  year: 'numeric',\n  hour: '2-digit',\n  minute: '2-digit'\n};\n\nconst useStyles = makeStyles(theme => ({\n  images: {\n    height: theme.spacing(50)\n  },\n  imagesBlock: {\n    display: 'flex'\n  },\n  rateLine: {\n    position: 'relative',\n    width: '100%',\n    height: theme.spacing(2),\n    backgroundColor: theme.palette.primary.light,\n    transitionDuration: '0.5s'\n  },\n  highlight: {\n    backgroundColor: `${theme.palette.primary.main} !important`\n  },\n  fillRateLine: {\n    height: theme.spacing(2),\n    backgroundColor: theme.palette.primary.light,\n    transitionDuration: '0.5s'\n  }\n}));\n\nconst PollCard: React.FC<PropTypes> = ({ poll, setPoll }) => {\n  const classes = useStyles();\n  const { author, contents: { left, right }, vote } = poll;\n  const { enqueueSnackbar } = useSnackbar();\n  const { isAuthenticated } = useAuth();\n  const date: string = new Date(poll.createdAt).toLocaleString('default', DATE_FORMAT);\n\n  const handleVote = (which: Which) => {\n    if (!isAuthenticated) {\n      enqueueSnackbar('Unauthorized users can not vote in polls', {\n        variant: 'error'\n      });\n    } else if (vote) {\n      enqueueSnackbar('You have already voted in this poll', {\n        variant: 'error'\n      });\n    } else {\n      const newVote = ({ which, pollId: poll._id });\n      const newPoll = { ...poll };\n      newPoll.contents[which].votes += 1;\n      newPoll.vote = {\n        _id: '',\n        authorId: '',\n        createdAt: new Date(),\n        ...newVote\n      };\n      setPoll(newPoll);\n\n      post('votes/', newVote);\n    }\n  };\n\n  const handleLeft = () => handleVote('left');\n  const handleRight = () => handleVote('right');\n\n  let leftPercentage;\n  let rightPercentage;\n\n  if (left.votes || right.votes) {\n    leftPercentage = Math.round(100 * (left.votes / (left.votes + right.votes)));\n    rightPercentage = 100 - leftPercentage;\n  } else {\n    leftPercentage = 0;\n    rightPercentage = 0;\n  }\n\n  const dominant: Which = left.votes >= right.votes ? 'left' : 'right';\n\n  return (\n    <Card>\n      <UserStrip user={author} info={date} />\n      <div className={classes.imagesBlock}>\n        <CardActionArea onDoubleClick={handleLeft}>\n          <CardMedia\n            className={classes.images}\n            image={left.url}\n          />\n          <PercentageBar value={leftPercentage} which=\"left\" like={vote?.which === 'left'} />\n        </CardActionArea>\n        <CardActionArea onDoubleClick={handleRight}>\n          <CardMedia\n            className={classes.images}\n            image={right.url}\n          />\n          <PercentageBar value={rightPercentage} which=\"right\" like={vote?.which === 'right'} />\n        </CardActionArea>\n      </div>\n      <div className={`${classes.rateLine} ${dominant === 'right' ? classes.highlight : ''}`}>\n        <div\n          className={`${classes.fillRateLine} ${dominant === 'left' ? classes.highlight : ''}`}\n          style={{ width: `${leftPercentage}%` }}\n        />\n      </div>\n    </Card>\n  );\n};\n\nexport default PollCard;\n","import React from 'react';\nimport { Poll } from 'which-types';\nimport { WindowScroller, AutoSizer, List } from 'react-virtualized';\nimport PollCard from '../PollCard/PollCard';\n\n\ninterface PropTypes {\n  polls: Poll[];\n  mutate: (polls: Poll[], refetch: boolean) => void;\n}\n\ninterface RenderPropTypes {\n  index: number;\n  key: string;\n  style: React.CSSProperties;\n}\n\n\nconst PollsList: React.FC<PropTypes> = ({ polls, mutate }) => {\n  const RenderItem: React.FC<RenderPropTypes> = ({ index, style, key }) => {\n    const poll = polls[index];\n\n    const setPoll = (newPoll: Poll) => {\n      const newPolls = [...polls];\n      newPolls[index] = newPoll;\n\n      // Force-update list-size so everything re-renders\n      mutate([], false);\n      mutate(newPolls, false);\n    };\n\n    return (\n      // To re-render on list resize, add this info to key\n      <div key={`${key}-${poll._id}-${polls.length}`} style={style}>\n        <PollCard poll={poll} setPoll={setPoll} />\n      </div>\n    );\n  };\n\n  return (\n    <WindowScroller>\n      {({\n        height,\n        isScrolling,\n        registerChild,\n        onChildScroll,\n        scrollTop\n      }) => (\n        <AutoSizer disableHeight>\n          {({ width }) => (\n            <div ref={registerChild}>\n              <List\n                autoHeight\n                height={height}\n                isScrolling={isScrolling}\n                onScroll={onChildScroll}\n                rowCount={polls.length}\n                rowHeight={550}\n                rowRenderer={RenderItem}\n                scrollTop={scrollTop}\n                width={width}\n                containerStyle={{ pointerEvents: 'auto' }}\n                overscanRowCount={1}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      )}\n    </WindowScroller>\n  );\n};\n\nexport default PollsList;\n\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\n\ninterface PropTypes {\n  text: string;\n  value: string | number;\n}\n\nconst useStyles = makeStyles({\n  root: {\n    position: 'relative'\n  },\n  menuButton: {\n    width: 200,\n    height: 50,\n    textAlign: 'center'\n  },\n  menuNumber: {\n    fontWeight: 800,\n    color: 'black'\n  },\n  menuText: {\n    color: 'darkgray'\n  }\n});\n\n\nconst Highlight: React.FC<PropTypes> = ({ text, value }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.menuButton}>\n      <div className={classes.menuNumber}>{value}</div>\n      <div className={classes.menuText}>{text}</div>\n    </div>\n  );\n};\n\nexport default Highlight;\n","import React, { useState } from 'react';\nimport {\n  Button,\n  TextField,\n  Dialog,\n  DialogActions,\n  DialogContent,\n  DialogContentText,\n  DialogTitle\n} from '@material-ui/core';\n\ninterface PropTypes {\n  isOpen: boolean;\n  setIsOpen: (value: boolean) => void;\n  callback: (url: string) => void;\n}\n\nconst UploadImage: React.FC<PropTypes> = ({ setIsOpen, isOpen, callback }) => {\n  const [url, setUrl] = useState<string>('');\n\n  const handleClose = () => {\n    setIsOpen(false);\n  };\n\n  const handleSubmit = () => {\n    let result = url;\n    if (url.startsWith('https://www.instagram.com/')) {\n      const match = url.match('/p/(.*)/');\n      const id = match && match[1];\n      result = `https://www.instagram.com/p/${id}/media/?size=l`;\n    } else if (url.startsWith('https://drive.google.com/')) {\n      const match = url.match('/d/(.*)/');\n      const fileId = match && match[1];\n      result = `https://drive.google.com/uc?export=view&id=${fileId}`;\n    }\n    callback(result || '');\n    handleClose();\n  };\n\n  const handleChange = (event:React.ChangeEvent<HTMLInputElement>) => {\n    setUrl(event.target.value);\n  };\n\n  return (\n    <div>\n      <Dialog open={isOpen} onClose={handleClose}>\n        <DialogTitle>Upload an Image</DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            Unfortunetly we do not support uploading images yet. Please provide a valid URL to your image:\n          </DialogContentText>\n          <TextField\n            autoFocus\n            margin=\"dense\"\n            id=\"name\"\n            label=\"Image URL\"\n            type=\"text\"\n            fullWidth\n            autoComplete=\"off\"\n            onChange={handleChange}\n          />\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\">\n            Cancel\n          </Button>\n          <Button onClick={handleSubmit} color=\"primary\" disabled={!url.length}>\n            Submit\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nexport default UploadImage;\n","import React, { useState } from 'react';\nimport { Badge, Typography } from '@material-ui/core/';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { User } from 'which-types';\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\nimport VerifiedIcon from '@material-ui/icons/CheckCircleOutline';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport Highlight from './Highlight';\nimport UploadImage from '../../components/UploadImage/UploadImage';\nimport Avatar from '../../components/Avatar/Avatar';\nimport { patch } from '../../requests';\nimport { useAuth } from '../../hooks/useAuth';\n\n\ninterface PropTypes {\n  savedPolls: number;\n  totalVotes: number;\n  userInfo: User | undefined;\n  setUserInfo: (userInfo: User) => void;\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    position: 'relative'\n  },\n  avatar: {\n    width: 150,\n    height: 150,\n    margin: '0 auto'\n  },\n  name: {\n    margin: theme.spacing(1, 0),\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  verified: {\n    marginLeft: theme.spacing(0.5),\n    width: theme.spacing(3),\n    height: theme.spacing(3)\n  },\n  profileMenu: {\n    display: 'flex',\n    width: '100%',\n    height: 50,\n    margin: '50px 0',\n    borderBottom: '1px solid lightgray'\n  },\n  menuButton: {\n    width: 200,\n    height: 50,\n    textAlign: 'center'\n  },\n  badge: {\n    width: theme.spacing(5),\n    height: theme.spacing(5),\n    borderRadius: '50%',\n    cursor: 'pointer',\n    background: '#d3d3d3',\n    display: 'flex',\n    alignItems: 'center',\n    '& svg': {\n      margin: '0 auto'\n    }\n  },\n  avatarContainer: {\n    position: 'relative',\n    textAlign: 'center'\n  },\n  menuNumber: {\n    fontWeight: 800,\n    color: 'black'\n  },\n  menuText: {\n    color: 'darkgray'\n  },\n  skeleton: {\n    margin: '10px auto',\n    borderRadius: 2\n  }\n\n}));\n\n\nconst ProfileInfo: React.FC<PropTypes> = ({\n  savedPolls, totalVotes, setUserInfo, userInfo\n}) => {\n  const classes = useStyles();\n  const [input, setInput] = useState(false);\n  const { user } = useAuth();\n  const dateSince = new Date(userInfo?.createdAt || '').toLocaleDateString();\n\n  const handleClick = () => {\n    setInput(!input);\n  };\n\n  const patchAvatar = (url: string) => {\n    const id = user?._id;\n    patch(`/users/${id}`, { avatarUrl: url }).then(res => {\n      setUserInfo(res.data);\n    });\n  };\n\n  return (\n    <div className={classes.root}>\n      {\n        !userInfo\n          ? <Skeleton animation=\"wave\" variant=\"circle\" width={150} height={150} className={classes.avatar} />\n          : userInfo?._id === user?._id\n            ? (\n              <div>\n                <div className={classes.avatarContainer}>\n                  <Badge\n                    overlap=\"circle\"\n                    anchorOrigin={{\n                      vertical: 'bottom',\n                      horizontal: 'right'\n                    }}\n                    onClick={handleClick}\n                    badgeContent={(\n                      <div className={classes.badge}>\n                        <CameraAltIcon />\n                      </div>\n                    )}\n                  >\n                    <Avatar className={classes.avatar} user={userInfo} />\n                  </Badge>\n                </div>\n                <UploadImage isOpen={input} setIsOpen={setInput} callback={patchAvatar} />\n              </div>\n            )\n            : <Avatar className={classes.avatar} user={userInfo} />\n      }\n      {\n        !userInfo\n          ? <Skeleton animation=\"wave\" variant=\"rect\" width={100} height={20} className={classes.skeleton} />\n          : (\n            <Typography variant=\"h5\" className={classes.name}>\n              {userInfo?.username}\n              {userInfo?.verified && <VerifiedIcon className={classes.verified} color=\"primary\" />}\n            </Typography>\n          )\n      }\n      <div className={classes.profileMenu}>\n        {\n          !userInfo\n            ? (\n              <>\n                <Skeleton animation=\"wave\" variant=\"rect\" width={170} height={20} className={classes.skeleton} />\n                <Skeleton animation=\"wave\" variant=\"rect\" width={170} height={20} className={classes.skeleton} />\n                <Skeleton animation=\"wave\" variant=\"rect\" width={170} height={20} className={classes.skeleton} />\n              </>\n            )\n            : (\n              <>\n                <Highlight text=\"Polls\" value={savedPolls} />\n                <Highlight text=\"Since\" value={dateSince} />\n                <Highlight text=\"Total votes\" value={totalVotes} />\n              </>\n            )\n        }\n      </div>\n    </div>\n  );\n};\n\nexport default ProfileInfo;\n","import React, { useEffect, useMemo } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Poll } from 'which-types';\nimport { Container } from '@material-ui/core';\n\nimport ProfileInfo from './ProfileInfo';\nimport PollsList from '../../components/PollsList/PollsList';\nimport Loading from '../../components/Loading/Loading';\nimport { useAuth } from '../../hooks/useAuth';\nimport { useUser, useProfile } from '../../hooks/APIClient';\n\n\nconst Profile: React.FC = () => {\n  const history = useHistory();\n  const { username } = useParams();\n  const { user } = useAuth();\n\n  const { data: userInfo, mutate: setUserInfo } = useUser(username);\n  const { data: polls, mutate: mutatePolls, isValidating } = useProfile(username);\n\n  useEffect(() => {\n    if (!username) {\n      if (user) history.push(`/profile/${user.username}`);\n      else history.push('/login');\n    }\n  }, [username, history, user]);\n\n\n  const totalVotes = useMemo(() => polls.reduce(\n    (total: number, current: Poll) => {\n      const { left, right } = current.contents;\n      return total + left.votes + right.votes;\n    }, 0\n  ), [polls]);\n\n  return (\n    <Container maxWidth=\"sm\" disableGutters>\n      <ProfileInfo\n        userInfo={userInfo}\n        setUserInfo={setUserInfo}\n        savedPolls={polls.length}\n        totalVotes={totalVotes}\n      />\n      {\n        isValidating && !polls\n          ? <Loading />\n          : <PollsList polls={polls} mutate={mutatePolls} />\n      }\n    </Container>\n  );\n};\n\nexport default Profile;\n"],"sourceRoot":""}